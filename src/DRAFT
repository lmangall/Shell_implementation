












/**
	* @brief This function that takes a string
	*the function should return 1 if there is double quotes, not inside single quotes
	*the function should return 2 if there is single quotes inside double quotes
	*the function should return 3 if there is no quotes
	*otherwise the function should return 0
	 */
int should_expand(char *str)
{
    int i = 0;
    int double_quotes = 0;
    int single_quotes = 0;

    while (str[i] != '\0')
    {
        if (str[i] == '\"' && single_quotes == 0)
            double_quotes++;
        if (str[i] == '\'' && double_quotes % 2 == 1)
            single_quotes++;
        i++;
    }

    if (double_quotes % 2 == 1 && single_quotes == 0)
        return 1;
    if (double_quotes % 2 == 1 && single_quotes % 2 == 1)
        return 2;
    if (double_quotes == 0 && single_quotes == 0)
        return 3;

    return 0;
}






START HERE















char	*find_val(char *name, t_data *data)
{
	int	i;

	i = 0;
	while (i < data->num_vars)
	{
		if (ft_strcmp(name, data->vars_container[i].name) == 0)
			return (data->vars_container[i].value);
		else
			i++;
	}
	return (NULL);
}


static char *ft_strtrim_single(char **s1, char c) 
{
	size_t front = 0;
	size_t rear = 0;
	char *str = NULL;
	printf("inside ft_strtrim_single\n");

	if (s1 != NULL && *s1 != NULL && **s1 != '\0') 
	{
		rear = ft_strlen(*s1);
printf("rear = %zu\n", rear);

		while (front < rear && (*s1)[front] == c)
			front++;
printf("front = %zu\n", front);

		while (rear > front && (*s1)[rear - 1] == c)
			rear--;
printf("rear = %zu\n", rear);

		str = ft_calloc(rear - front + 1, sizeof(char));
printf("str = %s\n", str);
		if (str)
			ft_strlcpy(str, &(*s1)[front], rear - front + 1);
	}
printf("str = %s\n", str);

	return str;
}



// void	trim_quotes(char **str, char quote) 
// {
// 	int i = 0;
// 	int j = 0;
// 	char *trimmed_str;

// 	trimmed_str = ft_calloc(ft_strlen(*str) - 1, sizeof(char));
// 	while (*str[i] != '\0') 
// 	{
// 		if (*str[i] != quote)
// 		{
// 			trimmed_str[j] = *str[i];
// 			j++;
// 		}
// 		i++;
// 	}
// 	free((char *)str);
// 	trimmed_str[j] = '\0';
// 	*str = trimmed_str;
// }


// void	expand(struct node_s **node, t_data *data)
// {
// // printf("\ninside expand\n");
// 	char	*var_name;
// 	t_vars	*var;
// 	int i = 0;

// // 	if (contains_two((*node)->str, '\"'))
// // 	{
// // 			trim_quotes(&(*node)->str, '\"');
// // printf("node->str in expand 1= %s\n", (*node)->str);
// // 		while ((var_name = identify_var((*node)->str, data)) != NULL || i < 5)
// // 		{
// // 			var = find_var(var_name, data);
// // 			expand_var(&(*node)->str, &var);
// // 			i++;
// // 		}
// // 	}                                           =>THIS IS DONE BEFORE
// 	// else if (contains_two((*node)->str, '\''))
// 	// {
// 	// 		trim_quotes(&(*node)->str, '\'');
// 	// }
// 	// else
// 	// {
// 		while ((var_name = identify_var((*node)->str, data)) != NULL || i < 5)
// 		{
// 			var = find_var(var_name, data);
// 			expand_var(&(*node)->str, &var);
// 			i++;
// 		}
// 	// }
// }	
